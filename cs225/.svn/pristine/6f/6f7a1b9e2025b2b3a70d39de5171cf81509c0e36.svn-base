/**
 * @file list.cpp
 * Doubly Linked List (MP 3).
 *
 * @author Chase Geigle
 * @date (created) Fall 2011
 * @date (modified) Spring 2012, Fall 2012
 *
 * @author Jack Toole
 * @date (modified) Fall 2011
 */

/**
 * Destroys the current List. This function should ensure that
 * memory does not leak on destruction of a list.
 */
 using namespace std;
 
template <class T>
List<T>::~List()
{
    /// @todo Graded in MP3.1
    clear();
}

/**
 * Destroys all dynamically allocated memory associated with the current
 * List class.
 */
template <class T>
void List<T>::clear()
{
    /// @todo Graded in MP3.1
    if(length == 0 || head == NULL){
    	return;
    }
    
    ListNode *current, *temp;
    current = head->next;
    delete head;
    while(current != NULL){
    	temp = current->next;
    	delete current;
    	current = temp;
    }
    length = 0;
    return;
}

/**
 * Inserts a new node at the front of the List.
 * This function **SHOULD** create a new ListNode.
 *
 * @param ndata The data to be inserted.
 */
template <class T>
void List<T>::insertFront(T const& ndata)
{
    /// @todo Graded in MP3.1
    ListNode *newnode = new ListNode(ndata);
    
    if(length == 0 || head == NULL){//nothing in the list
    	head = newnode;
    	tail = newnode;
    	newnode->next = NULL;
    	newnode->prev = NULL;
    	length++;
    	return;
    }
    
    ListNode *current;
    current = head;//saves the original head
    head = newnode;//get the new head
    head->next = current;//link the head to original head
    head->prev = NULL;//set head null
    current->prev = head;//link the original head to head
    length++;
    return;
}

/**
 * Inserts a new node at the back of the List.
 * This function **SHOULD** create a new ListNode.
 *
 * @param ndata The data to be inserted.
 */
template <class T>
void List<T>::insertBack(const T& ndata)
{
    /// @todo Graded in MP3.1
    ListNode *newnode = new ListNode(ndata);
    
    if(length == 0 || head == NULL){//nothing in the list
    	head = newnode;
    	tail = newnode;
    	newnode->next = NULL;
    	newnode->prev = NULL;
    	length++;
    	return;
    }
    
    ListNode *current;
    current = tail;//saves the original end
    tail = newnode;//get the new end
    tail->next = NULL;//link the head to original head
    tail->prev = current;
    current->next = tail;//link the original head to head
    length++;
    return;
}

/**
 * Reverses the current List.
 */
template <class T>
void List<T>::reverse()
{
    reverse(head, tail);
}

/**
 * Helper function to reverse a sequence of linked memory inside a List,
 * starting at startPoint and ending at endPoint. You are responsible for
 * updating startPoint and endPoint to point to the new starting and ending
 * points of the rearranged sequence of linked memory in question.
 *
 * @param startPoint A pointer reference to the first node in the sequence
 *  to be reversed.
 * @param endPoint A pointer reference to the last node in the sequence to
 *  be reversed.
 */
template <class T>
void List<T>::reverse(ListNode*& startPoint, ListNode*& endPoint)
{
    /// @todo Graded in MP3.1
    if(startPoint == NULL || endPoint == NULL){
    	return;
    	}
    //case one: only one 
    if(startPoint == endPoint){
    	return;
    }
    
    ListNode *oldhead, *oldtail, *current, *oldprev, *oldnext;
    //case two: NULL->list->
    if(startPoint->prev == NULL && endPoint->next != NULL){
    	oldhead = startPoint;
    	oldtail = endPoint->next; //saves the old tail
    	//reverse
    	current = startPoint; 
    	while(current != oldtail){
    		oldnext = current->next;
    		oldprev = current->prev;
    		current->next = oldprev;
    		current->prev = oldnext;
    		current = oldnext; //move to the next one
    	}
    	//pack the linklist
    	oldhead->next = oldtail; //set head
    	startPoint = oldtail->prev;//link start
    	oldtail->prev = oldhead;//link end next
    	endPoint = oldtail->prev;//link end 
    	return;
    }
    
    //case three: ->list->NULL
    if(startPoint->prev != NULL && endPoint->next == NULL){
    	ListNode *oldheadhead;
	oldheadhead = startPoint->prev;
    	oldhead = startPoint;
    	oldtail = endPoint; //saves the old tail
    	//reverse
    	current = startPoint; 
    	while(current != NULL){
    		oldnext = current->next;
    		oldprev = current->prev;
    		current->next = oldprev;
    		current->prev = oldnext;
    		current = oldnext; //move to the next one
    	}
    	//pack the linklist
    	oldheadhead->next = oldtail;
    	oldtail->prev = oldheadhead;
    	oldhead->next = NULL;
 	startPoint = oldtail;
 	endPoint = oldhead; 
    	return;
    }
    
    //case four: NULL->list->NULL
    if(startPoint->prev == NULL && endPoint->next == NULL){
    	oldhead = startPoint;
    	oldtail = endPoint; //saves the old tail
    	//reverse
    	current = startPoint; 
    	while(current != NULL){
    		oldnext = current->next;
    		oldprev = current->prev;
    		current->next = oldprev;
    		current->prev = oldnext;
    		current = oldnext; //move to the next one
    	}
    	//pack the linklist
    	oldtail->prev = NULL;
    	oldhead->next = NULL;
 	startPoint = oldtail;
 	endPoint = oldhead; 
    	return;
    }
    //case five: ->list->
    	ListNode *oldheadhead, *oldtailtail;
	oldheadhead = startPoint->prev;
	oldtailtail = endPoint->next;
    	oldhead = startPoint;
    	oldtail = endPoint; //saves the old tail
    	//reverse
    	current = startPoint; 
    	while(current != oldtailtail){
    		oldnext = current->next;
    		oldprev = current->prev;
    		current->next = oldprev;
    		current->prev = oldnext;
    		current = oldnext; //move to the next one
    	}
    	//pack the linklist
    	oldheadhead->next = oldtail;
    	oldtail->prev = oldheadhead;
    	oldhead->next = oldtailtail;
    	oldtailtail->prev = oldhead;
 	startPoint = oldtail;
 	endPoint = oldhead; 
    	return;
    
}

/**
 * Reverses blocks of size n in the current List. You should use your
 * reverse( ListNode * &, ListNode * & ) helper function in this method!
 *
 * @param n The size of the blocks in the List to be reversed.
 */
template <class T>
void List<T>::reverseNth(int n)
{
    /// @todo Graded in MP3.1
    if(n <= 0){
    	return;
    	}
    	
    if(length <= 1){
    	return;
    	}
    int counter = 1;
    int flag = 0;
    ListNode *start, *current;
   
    start = head;
    current = head;
    while(current != NULL){
    	if(counter == n){
    		reverse(start, current);
    		if(flag == 0){
    			head = start;
    			flag = 1;
    		}
    		counter = 1;
    		start = current->next;
    		current = current->next;
    		continue;
    		}
    	current = current->next;
    	counter++;
    	}
	
   if(counter != 1){
   	reverse(start, tail);
   }
   
   current = head;
   while(current->next != NULL){
   	current = current->next;
   }
   tail = current;
   return;
    
}

/**
 * Modifies the List using the waterfall algorithm.
 * Every other node (starting from the second one) is removed from the
 * List, but appended at the back, becoming the new tail. This continues
 * until the next thing to be removed is either the tail (**not necessarily
 * the original tail!**) or NULL.  You may **NOT** allocate new ListNodes.
 * Note that since the tail should be continuously updated, some nodes will
 * be moved more than once.
 */
template <class T>
void List<T>::waterfall()
{
    /// @todo Graded in MP3.1
    ListNode *temp, *current;
    current = head;
    while(current->next != tail){
    	//erase the node
    	temp = current->next;
    	current->next = temp->next;
    	temp->next->prev = current;
    	
    	//append to the end
    	tail->next = temp;
    	temp->prev = tail;
    	temp->next = NULL;
    	tail = temp;
    	//move to the next
    	current = current->next;
    }
}

/**
 * Splits the given list into two parts by dividing it at the splitPoint.
 *
 * @param splitPoint Point at which the list should be split into two.
 * @return The second list created from the split.
 */
template <class T>
List<T> List<T>::split(int splitPoint)
{
    if (splitPoint > length)
        return List<T>();

    if (splitPoint < 0)
        splitPoint = 0;

    ListNode* secondHead = split(head, splitPoint);

    int oldLength = length;
    if (secondHead == head) {
        // current list is going to be empty
        head = NULL;
        tail = NULL;
        length = 0;
    } else {
        // set up current list
        tail = head;
        while (tail->next != NULL)
            tail = tail->next;
        length = splitPoint;
    }

    // set up the returned list
    List<T> ret;
    ret.head = secondHead;
    ret.tail = secondHead;
    if (ret.tail != NULL) {
        while (ret.tail->next != NULL)
            ret.tail = ret.tail->next;
    }
    ret.length = oldLength - splitPoint;
    return ret;
}

/**
 * Helper function to split a sequence of linked memory at the node
 * splitPoint steps **after** start. In other words, it should disconnect
 * the sequence of linked memory after the given number of nodes, and
 * return a pointer to the starting node of the new sequence of linked
 * memory.
 *
 * This function **SHOULD NOT** create **ANY** new List objects!
 *
 * @param start The node to start from.
 * @param splitPoint The number of steps to walk before splitting.
 * @return The starting node of the sequence that was split off.
 */
template <class T>
typename List<T>::ListNode* List<T>::split(ListNode* start, int splitPoint)
{
    /// @todo Graded in MP3.2
    int counter = 1;
    int flag = 0;
    ListNode * current, *newhead;
    current = start;
    while(current != NULL){
	    if(splitPoint == counter){
	    	if(current->next == NULL){
	    		newhead = NULL;
	    		current->next = NULL;
	    		flag = 1;
	    		break;
	    	}
	    	newhead = current->next;//get new head
	    	current->next = NULL;
	    	newhead->prev = NULL;
	    	flag = 1;
	    	break;
	    }
	    current = current->next;
	    counter++;
    }
    
    if(flag == 1){
    	return newhead;
    }
    else{
    	return NULL; //fail
    }
}

/**
 * Merges the given sorted list into the current sorted list.
 *
 * @param otherList List to be merged into the current list.
 */
template <class T>
void List<T>::mergeWith(List<T>& otherList)
{
    // set up the current list
    head = merge(head, otherList.head);
    tail = head;

    // make sure there is a node in the new list
    if (tail != NULL) {
        while (tail->next != NULL)
            tail = tail->next;
    }
    length = length + otherList.length;

    // empty out the parameter list
    otherList.head = NULL;
    otherList.tail = NULL;
    otherList.length = 0;
}

/**
 * Helper function to merge two **sorted** and **independent** sequences of
 * linked memory. The result should be a single sequence that is itself
 * sorted.
 *
 * This function **SHOULD NOT** create **ANY** new List objects.
 *
 * @param first The starting node of the first sequence.
 * @param second The starting node of the second sequence.
 * @return The starting node of the resulting, sorted sequence.
 */
template <class T>
typename List<T>::ListNode* List<T>::merge(ListNode* first, ListNode* second)
{
    /// @todo Graded in MP3.2
    ListNode *current_this, *current_other, *temp;
    current_this = first;
    current_other = second;
    
    //check head
    if(current_this->data > current_other->data){
    	temp = current_other->next;
    	current_other->next = current_this;
    	current_this->prev = current_other;
    	first = current_other;
    	current_other = temp;//probably is a NULL
    	current_other->prev = NULL;//for safe
    }
    
    current_this = first;//
    //TODO
    }
    return NULL; // change me!
}

/**
 * Sorts the current list by applying the Mergesort algorithm.
 */
template <class T>
void List<T>::sort()
{
    if (empty())
        return;
    head = mergesort(head, length);
    tail = head;
    while (tail->next != NULL)
        tail = tail->next;
}

/**
 * Sorts a chain of linked memory given a start node and a size.
 * This is the recursive helper for the Mergesort algorithm (i.e., this is
 * the divide-and-conquer step).
 *
 * @param start Starting point of the chain.
 * @param chainLength Size of the chain to be sorted.
 * @return A pointer to the beginning of the now sorted chain.
 */
template <class T>
typename List<T>::ListNode* List<T>::mergesort(ListNode* start, int chainLength)
{
    /// @todo Graded in MP3.2
    
    return NULL; // change me!
}
